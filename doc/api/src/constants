constants
# Skinware - User API
version version 1.0.0.894
author Shahbaz Youssefi
keyword skin
keyword middleware
keyword skinware
keyword DIST
keyword MacLAB
shortcut index
shortcut globals
seealso `[#skin_object_load](skin_object)`
seealso `[#skin_reader_start](skin_reader)`
seealso `[#skin_object_last_error](skin_object)`
seealso `[skin_rt]` Functions

Constants in the skin are divided in 5 groups:
- Range limits
- Return values
- Flags
- RT constants
- Meta

CONST_GROUP Range Limits
	Limits to range of values

	These constants are limits to range of values such as the maximum possible response from a sensor, or maximum number of sensors, regions etc
	in the skin.

	CONSTANT SKIN_SENSOR_RESPONSE_MAX: 65535
		Maximum value of a sensor response

		This is the maximum possible value of a sensor response. The minimum response of the sensors are 0.

	CONSTANT SKIN_SENSOR_TYPE_MAX
		Maximum number of sensor types in the skin

		If Skinware is configured to support large skins, this value will be `2^32-2`. Otherwise, it is `2^16-2`. This number shows the
		maximum possible number of sensor types in the skin.

	CONSTANT SKIN_SENSOR_MAX
		Maximum number of sensor in the skin

		If Skinware is configured to support large skins, this value will be `2^32-2`. Otherwise, it is `2^16-2`. This number shows the
		maximum number of possible sensors in the skin.

	CONSTANT SKIN_MODULE_MAX
		Maximum number of modules in the skin

		If Skinware is configured to support large skins, this value will be `2^32-2`. Otherwise, it is `2^16-2`. This number shows the
		maximum possible number of modules in the skin.

	CONSTANT SKIN_PATCH_MAX
		Maximum number of patches in the skin

		If Skinware is configured to support large skins, this value will be `2^32-2`. Otherwise, it is `2^16-2`. This number shows the
		maximum possible number of patches in the skin.

	CONSTANT SKIN_REGION_MAX
		Maximum number of region in the skin

		If Skinware is configured to support large skins, this value will be `2^32-2`. Otherwise, it is `2^16-2`. This number shows the
		maximum possible number of regions in the skin.

	CONSTANT SKIN_SUB_REGION_MAX
		Maximum number of sub-regions in the skin

		If Skinware is configured to support large skins, this value will be `2^32-2`. Otherwise, it is `2^16-2`. This number shows the
		maximum possible number of sub-regions in the skin.

CONST_GROUP Function Return Values
	Possible return values from the functions in the library

	These are the possible return values from any function in the library unless otherwise indicated. Throughout the library, any function
	that has a return value has its possible return values listed. Functions of `[skin_rt](#Real-time Interface)` set have different return
	values, though.

	CONSTANT SKIN_SUCCESS
		Return value of operations if successful

		A non-negative value indicating successful operation. Returned by the following functions:

			- `[#skin_object_load](skin_object)`
			- `[#skin_reader_start](skin_reader)`
			- `[#skin_reader_stop](skin_reader)`
			- `[#skin_reader_pause](skin_reader)`
			- `[#skin_reader_resume](skin_reader)`
			- `[#skin_reader_request](skin_reader)`
			- `[#skin_reader_request_nonblocking](skin_reader)`
			- `[#skin_reader_await_response](skin_reader)`
			- `[#skin_reader_register_user](skin_reader)`
			- `[#skin_reader_unregister_user](skin_reader)`
			- `[#skin_service_manager_start_service](skin_service_manager)`
			- `[#skin_service_manager_stop_service](skin_service_manager)`
			- `[#skin_service_manager_pause_service](skin_service_manager)`
			- `[#skin_service_manager_resume_service](skin_service_manager)`
			- `[#skin_service_manager_connect_to_periodic_service](skin_service_manager)`
			- `[#skin_service_manager_connect_to_sporadic_service](skin_service_manager)`
			- `[#skin_service_lock](skin_service)`
			- `[#skin_service_unlock](skin_service)`
			- `[#skin_service_request](skin_service)`
			- `[#skin_service_request_nonblocking](skin_service)`
			- `[#skin_service_await_response](skin_service)`
			- `[#skin_object_calibration_begin](skin_object)`
			- `[#skin_object_calibration_end](skin_object)`
			- `[#skin_object_calibration_reload](skin_object)`
			- `[#skin_object_regionalization_begin](skin_object)`
			- `[#skin_object_regionalization_end](skin_object)`
			- `[#skin_object_regionalization_reload](skin_object)`

		Function `[#skin_object_last_error](skin_object)` can be called to obtain possible warnings.

	CONSTANT SKIN_PARTIAL
		Return value of operations if only partially successful

		A non-negative value indicating partial success in operations that are performed on multiple layers. Returned by the following functions:

			- `[#skin_reader_request](skin_reader)`
			- `[#skin_reader_request_nonblocking](skin_reader)`
			- `[#skin_reader_await_response](skin_reader)`

		Function `[#skin_object_last_error](skin_object)` can be called to obtain possible warnings.

	CONSTANT SKIN_FAIL
		Return value of operations if failed

		A negative value indicating failed operation. Returned by the following functions:

			- `[#skin_object_load](skin_object)`
			- `[#skin_reader_start](skin_reader)`
			- `[#skin_reader_stop](skin_reader)`
			- `[#skin_reader_resume](skin_reader)`
			- `[#skin_reader_request](skin_reader)`
			- `[#skin_reader_request_nonblocking](skin_reader)`
			- `[#skin_reader_await_response](skin_reader)`
			- `[#skin_reader_is_paused](skin_reader)`
			- `[#skin_reader_register_user](skin_reader)`
			- `[#skin_reader_unregister_user](skin_reader)`
			- `[#skin_service_manager_initialize_periodic_service](skin_service_manager)`
			- `[#skin_service_manager_initialize_sporadic_service](skin_service_manager)`
			- `[#skin_service_manager_start_service](skin_service_manager)`
			- `[#skin_service_manager_stop_service](skin_service_manager)`
			- `[#skin_service_manager_pause_service](skin_service_manager)`
			- `[#skin_service_manager_resume_service](skin_service_manager)`
			- `[#skin_service_manager_connect_to_periodic_service](skin_service_manager)`
			- `[#skin_service_manager_connect_to_sporadic_service](skin_service_manager)`
			- `[#skin_service_lock](skin_service)`
			- `[#skin_service_unlock](skin_service)`
			- `[#skin_service_request](skin_service)`
			- `[#skin_service_request_nonblocking](skin_service)`
			- `[#skin_service_await_response](skin_service)`
			- `[#skin_object_calibration_begin](skin_object)`
			- `[#skin_object_calibration_end](skin_object)`
			- `[#skin_object_calibration_reload](skin_object)`
			- `[#skin_object_regionalization_begin](skin_object)`
			- `[#skin_object_regionalization_end](skin_object)`
			- `[#skin_object_regionalization_reload](skin_object)`

		Function `[#skin_object_last_error](skin_object)` can be called to obtain more detailed explanation of the error.

	CONSTANT SKIN_BAD_DATA
		Return value of operations if provided data was invalid

		A negative value indicating that data provided to function is invalid. Returned by the following functions:

			- `[#skin_service_manager_initialize_periodic_service](skin_service_manager)`
			- `[#skin_service_manager_initialize_sporadic_service](skin_service_manager)`
			- `[#skin_service_manager_start_service](skin_service_manager)`

	CONSTANT SKIN_BAD_NAME
		Return value of operations if provided name was not available

		A negative value indicating that a requested service name is not available. Returned by the following functions:

			- `[#skin_service_manager_initialize_periodic_service](skin_service_manager)`
			- `[#skin_service_manager_initialize_sporadic_service](skin_service_manager)`

	CONSTANT SKIN_BAD_ID
		Return value of operations if provided id was not available

		A negative value indicating that a function was requested on an invalid id. Returned by the following functions:

			- `[#skin_reader_start](skin_reader)`
			- `[#skin_reader_stop](skin_reader)`
			- `[#skin_reader_pause](skin_reader)`
			- `[#skin_reader_resume](skin_reader)`
			- `[#skin_reader_request](skin_reader)`
			- `[#skin_reader_request_nonblocking](skin_reader)`
			- `[#skin_reader_await_response](skin_reader)`
			- `[#skin_reader_is_paused](skin_reader)`
			- `[#skin_reader_register_user](skin_reader)`
			- `[#skin_reader_unregister_user](skin_reader)`
			- `[#skin_service_manager_start_service](skin_service_manager)`
			- `[#skin_service_manager_stop_service](skin_service_manager)`
			- `[#skin_service_manager_pause_service](skin_service_manager)`
			- `[#skin_service_manager_resume_service](skin_service_manager)`

	CONSTANT SKIN_NO_MEM
		Return value of operations if failed to acquire memory

		A negative value indicating that memory could not be allocated. Returned by the following functions:

			- `[#skin_object_load](skin_object)`
			- `[#skin_object_calibration_begin](skin_object)`
			- `[#skin_object_calibration_end](skin_object)`
			- `[#skin_object_calibration_reload](skin_object)`
			- `[#skin_object_regionalization_begin](skin_object)`
			- `[#skin_object_regionalization_end](skin_object)`
			- `[#skin_object_regionalization_reload](skin_object)`
			- `[#skin_service_manager_initialize_periodic_service](skin_service_manager)`
			- `[#skin_service_manager_initialize_sporadic_service](skin_service_manager)`

		Function `[#skin_object_last_error](skin_object)` can be called to obtain more detailed explanation of the error.

	CONSTANT SKIN_LOCK_NOT_ACQUIRED
		Return value of lock operations if lock could not be acquired with try-lock

		A negative value indicating that a try-lock failed to acquire lock. Note that this is different from `[#SKIN_FAIL]` because the operation was
		valid and there were no errors. Returned by the following function:

			- `[#skin_reader_wait_read](skin_reader)`
			- `[#skin_service_lock](skin_service)`
			- `[#skin_service_request](skin_service)`
			- `[#skin_service_await_response](skin_service)`

		**Note:** This return value is **not** necessarily the same as [#SKIN_RT_LOCK_NOT_ACQUIRED].

	CONSTANT SKIN_LOCK_TIMEOUT
		Return value of lock operations if lock could not be acquired in timed-lock

		A negative value indicating that a timed-lock failed due to a timeout. Note that this is different from `[#SKIN_FAIL]` because the operation was
		valid and there were no errors. Returned by the following function:

			- `[#skin_reader_wait_read](skin_reader)`

		**Note:** This return value is **not** necessarily the same as [#SKIN_RT_TIMEOUT].

	CONSTANT SKIN_NO_FILE
		Return value of operations if an input file could not be opened

		A negative value indicating that an input file could not be opened. Returned by the following functions:

			- `[#skin_object_calibration_reload](skin_object)`
			- `[#skin_object_regionalization_reload](skin_object)`

	CONSTANT SKIN_FILE_INCOMPLETE
		Return value of operations if an input file was incomplete

		A negative value indicating that end of file has been reached while more data was expected. Returned by the following functions:

			- `[#skin_object_calibration_reload](skin_object)`
			- `[#skin_object_regionalization_reload](skin_object)`

		Note that ISO requires an additional enter (character `\\n`) to be written at the end of the files, which is done by editors
		supporting ISO, such as Vim. It is important to note that currently, the library counts on existing whitespace after the last
		data, otherwise this error will be generated.

		Function `[#skin_object_last_error](skin_object)` can be called to obtain more detailed explanation of the error.

	CONSTANT SKIN_FILE_PARSE_ERROR
		Return value of operations if there was a parse error in an input file

		A negative value indicating that an input file has a wrong format. Returned by the following functions:

			- `[#skin_object_calibration_reload](skin_object)`
			- `[#skin_object_regionalization_reload](skin_object)`

		Function `[#skin_object_last_error](skin_object)` can be called to obtain more detailed explanation of the error.

	CONSTANT SKIN_FILE_INVALID
		Return value of operations if an input file contains invalid data

		A negative value indicating that an input file contains invalid data, that is data incoherent with data read from the kernel. This can arise
		by trying to load a cache that was made from a different configuration of the skin. Returned by the following functions:

			- `[#skin_object_calibration_reload](skin_object)`
			- `[#skin_object_regionalization_reload](skin_object)`

		Function `[#skin_object_last_error](skin_object)` can be called to obtain more detailed explanation of the error.

CONST_GROUP Flag Values
	Values used as flags in the library

	These are constants that are used within the library as flags, either to flag a certain data, or as input to functions of the library.

	CONSTANT SKIN_INVALID_ID: 0xffffffffu
		An invalid id for sensor types, sensors, modules, patches, sub-regions and regions

		A value indicating an erroneous or non-existing entity; a sensor type, a sensor, a module, a patch, a sub-region or a region.
		When comparing ids with this value, make sure you cast it to the proper type. For example, checking if a sensor has invalid
		id, its id needs to be compared with `([skin_sensor_id](skin_object#skin_sensor_id))SKIN_INVALID_ID`.

	CONSTANT SKIN_INVALID_SIZE: 0xffffffffu
		An invalid size for sensor types, sensors, modules, patches, sub-regions and regions

		A value indicating an erroneous number of entities; sensor types, sensors, modules, patches, sub-regions or regions.
		When comparing sizes with this value, make sure you cast it to the proper type. This value is currently unused.

	CONSTANT SKIN_ACQUISITION_ASAP
		ASAP acquisition mode with the skin kernel

		This value is used by the `[#skin_reader_start](skin_reader)` function to determine the mode in which data
		acquisition is done. With this value, the acquisition will be done in _ASAP_ mode.

		For a complete description of how this mode works, please refer to [`skin_reader`'s overview](skin_reader#Overview).

	CONSTANT SKIN_ACQUISITION_PERIODIC
		Periodic acquisition mode with the skin kernel

		This value is used by the `[#skin_reader_start](skin_reader)` function to determine the mode in which data
		acquisition is done. With this value, the acquisition will be done in _Periodic_ mode.

		For a complete description of how this mode works, please refer to [`skin_reader`'s overview](skin_reader#Overview).

	CONSTANT SKIN_ACQUISITION_SPORADIC
		Sporadic acquisition mode with the skin kernel

		This value is used by the `[#skin_reader_start](skin_reader)` function to determine the mode in which data
		acquisition is done. With this value, the acquisition will be done in _Sporadic_ mode.

		For a complete description of how this mode works, please refer to [`skin_reader`'s overview](skin_reader#Overview).

	CONSTANT SKIN_ALL_SENSOR_TYPES
		Perform operation on all sensor types instead of one

		This flag can be used with `[#skin_reader_start](skin_reader)`, `[#skin_reader_stop](skin_reader)`, `[#skin_reader_request](skin_reader)`,
		`[#skin_reader_request_nonblocking](skin_reader)`, `[#skin_reader_await_response](skin_reader)`, `[#skin_reader_pause](skin_reader)`,
		`[#skin_reader_resume](skin_reader)`, `[#skin_reader_is_paused](skin_reader)`, `[#skin_reader_register_user](skin_reader)` and
		`[#skin_reader_unregister_user](skin_reader)` functions given as their `sensor_type` argument to perform the operation on all
		sensor types instead of one.

	CONSTANT SKIN_CALLBACK_CONTINUE
		Continue iteration of for-each operation

		This flag can be used as return value of a [callback](skin_callbacks) to indicate that the iteration must continue.

	CONSTANT SKIN_CALLBACK_STOP
		Stop iteration of for-each operation

		This flag can be used as return value of a [callback](skin_callbacks) to indicate that the iteration must stop.

CONST_GROUP Real-time Interface
	Constants related to real-time interface of the library

	This library provides an interface to the real-time facilities provided by the native platform. This interface can be used instead of
	directly using the native platform's functions, both for simplicity and portability.

	CONSTANT SKIN_RT_SUCCESS: 0
		Return value of real-time operations if successful

		Return value of many of [real-time functions](skin_rt). This value is defined as zero and indicates that the operation had been successful.

	CONSTANT SKIN_RT_FAIL
		Return value of real-time operations if failed

		Return value of many of [real-time functions](skin_rt). This value indicates that the operation had failed due to some error.

	CONSTANT SKIN_RT_INVALID
		Return value of real-time operations if given an invalid input

		Return value of some of [real-time functions](skin_rt). This value indicates that the operation is invalid.

	CONSTANT SKIN_RT_NO_MEM
		Return value of real-time operations if memory could not be acquired

		Return value of some of [real-time functions](skin_rt). This value indicates that the operation has failed because of insufficient memory.

	CONSTANT SKIN_RT_TIMEOUT
		Return value of real-time operations if timeout happens

		Return value of timed [real-time functions](skin_rt). This value indicates that a timed function, for example `[#skin_rt_mutex_timed_lock](skin_rt)`
		has returned, not failed (that is nothing is wrong), but not successful either. In the example above, the process had been blocked for
		the specified time, yet could not acquire lock and is being unblocked.

	CONSTANT SKIN_RT_SYNC_MECHANISM_ERROR
		Return value of real-time operations if there was an error operating on a lock

		Return value of some of [real-time functions](skin_rt) related to synchronization mechanisms. This value indicates that the operation has
		failed because of any unforeseen error.

	CONSTANT SKIN_RT_LOCK_NOT_ACQUIRED
		Return value of real-time operations if a try-lock did not acquire lock

		Return value of some of [real-time functions](skin_rt) related to synchronization mechanisms. This value indicates that the requested lock
		could not be acquired. This value is returned by conditional lock functions such as `[#skin_rt_mutex_try_lock](skin_rt)`.

	CONSTANT SKIN_RT_INVALID_SEM
		Return value of real-time operations if an invalid semaphore was given

		Return value of some of [real-time functions](skin_rt) related to synchronization mechanisms. This value indicates that the operation has
		failed because an invalid semaphore had been sent as argument.

	CONSTANT SKIN_RT_INVALID_MUTEX
		Return value of real-time operations if an invalid mutex was given

		Return value of some of [real-time functions](skin_rt) related to synchronization mechanisms. This value indicates that the operation has
		failed because an invalid mutex had been sent as argument.

	CONSTANT SKIN_RT_INVALID_RWLOCK
		Return value of real-time operations if an invalid readers-writer lock was given

		Return value of some of [real-time functions](skin_rt) related to synchronization mechanisms. This value indicates that the operation has
		failed because an invalid readers-writer lock had been sent as argument.

	CONSTANT SKIN_RT_MIN_PRIORITY
		Minimum possible real-time priority

		The minimum possible priority for the task when setting priority through `[skin_rt_user_task_on_start](skin_rt)`.

	CONSTANT SKIN_RT_MAX_PRIORITY
		Maximum possible real-time priority

		The maximum possible priority for the task when setting priority through `[skin_rt_user_task_on_start](skin_rt)`.

	CONSTANT SKIN_RT_LINUX_PRIORITY
		Real-time priority given to linux kernel

		Priority for the task equal to that of the linux kernel's when setting priority through `[skin_rt_user_task_on_start](skin_rt)`.

	CONSTANT SKIN_RT_MORE_PRIORITY
		Adding priority by this constant yields higher priority

		This value is the means to obtain higher or lower priorities. The reason for this is that in some real-time platforms, the minimum
		priority could be 0, while in others (which is the case in this version of the API) 0 is the maximum priority. Therefore by
		adding `SKIN_RT_MORE_PRIORITY` to a certain priority, you will certainly obtain a higher priority. Likewise,
		subtracting it from a priority yields a lower priority.

		Note that you should not exceed `[#SKIN_RT_MAX_PRIORITY]` and `[#SKIN_RT_MIN_PRIORITY]`. However, it is not possible to directly check
		against these two values because of the above reason, that is, 0 could be the maximum priority. The function
		`[#skin_rt_priority_is_valid](skin_rt)` could be used to determine whether the obtained priority is within range or not.

	CONSTANT SKIN_RT_MAX_NAME_LENGTH: 6
		Names used to share objects between real-time threads can have at most this many characters

		To share memory or objects between real-time threads, they need to be assigned a name. The length of these names can be at most `SKIN_RT_MAX_NAME_LENGTH`.

CONST_GROUP Meta
	Constants providing information about the library

	These are constants that give information about the library itself. Currently, they only include version-related constants.

	CONSTANT SKIN_VERSION_MAJOR: 1
		The major number of the version of the skin API

		The major number in the skin version. This number changes only in case of fundamental changes in the library.

	CONSTANT SKIN_VERSION_MINOR: 0
		The minor number of the version of the skin API

		The minor number in the skin version. This number increases with added functionality or partial changes in the library.

	CONSTANT SKIN_VERSION_REVISION: 0
		The revision number of the version of the skin API

		The revision number in the skin version. This number increases only when minor changes to the library take place while the
		overall functionality of the skin is the same. This includes bug-fixing, renaming functions and variables, added error-checking
		and such.

	CONSTANT SKIN_VERSION_BUILD: 894
		The build number of the version of the skin API

		This number shows how many times the skin library files have been all successfully compiled.

	CONSTANT SKIN_VERSION: "1.0.0.894"
		The complete version of the skin API as a string

		This number is merely a string concatenation of the previous four values in the following format:
		```SKIN_VERSION_MAJOR.SKIN_VERSION_MINOR.SKIN_VERSION_REVISION.SKIN_VERSION_BUILD```
