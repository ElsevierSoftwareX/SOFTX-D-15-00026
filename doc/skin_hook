api skin_hook
# Skinware
version version 2.0.0
author Shahbaz Youssefi
keyword skin
keyword middleware
keyword skinware
keyword MacLAB
shortcut index
shortcut globals
shortcut constants
next struct skin
seealso `[skin]`

When a new object is created or destroyed, a hook callback can be possibly called.  It is possible for
[readers](skin_reader_callbacks#init), [writers](skin_writer_callbacks#init),
[drivers](skin_driver_callbacks#init) and [users](skin_user_callbacks#init) to have per-object init and
clean hooks.  The generic init hook is called after the object-specific init hook and the generic clean hook is
called before the object-specific clean hook.

On user initialization, the sensor, module and patch init hooks are called (in that order) before the user init hook.
On user clean up, the patch, module and sensor clean hooks are called (in that order) after the user clean hook.

The functions setting the hooks have the following general form:

```
skin_set_X_E_hook(struct skin *, skin_hook_X, data)
```

In this representation, `X` is the object the hook is being set for and `E` is the event.  The events are the following.

- init
- clean

The structures that can be hooked are the following.

- `[struct skin_sensor](skin_sensor)`
- `[struct skin_module](skin_module)`
- `[struct skin_patch](skin_patch)`
- `[struct skin_reader](skin_reader)`
- `[struct skin_writer](skin_writer)`
- `[struct skin_driver](skin_driver)`
- `[struct skin_user](skin_user)`

TYPE skin_hook_X: (struct skin_X *, void *): void
	A callback for object event

	This callback is called when an object is created or removed, given the object for which the event has happened,
	as well as the data provided to that function.  The possible `X`s are:

	- `sensor`
	- `module`
	- `patch`
	- `reader`
	- `writer`
	- `driver`
	- `user`
