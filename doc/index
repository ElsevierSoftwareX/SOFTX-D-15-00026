index
# Skinware
version version 2.0.0
author Shahbaz Youssefi
keyword skin
keyword middleware
keyword skinware
keyword MacLAB
shortcut globals
shortcut constants

# Introduction

Skinware in its core provides a flexible data chunk transfer mechanism between two tasks, as is suitable for a
skin-related application.  Generic services can be provided and used by starting writers and readers.  Skin-tailored
drivers and users internally use writers and readers, but provide facilities over them useful for a skin application.

Services provide means to transfer arbitrary data with arbitrary format.  They use _writers_ to provide and _readers_
to take the data.  It would be the responsibility of the service provider to let the service users know what is the
format of the data.  One usage pattern could be for the service provider to also provide a library capable of extracting
information from the data memory, useful for the service users.

Tailored to skin, _drivers_ use writers to provide skin data as well as the skin structure.  On the other end, _users_
use readers to retrieve those data.  All four entities (writers, readers, drivers and users) are given callbacks by
the application to provide/use the data as they see fit.  Users have the option to use a default callback which copies
sensor responses to their respective structures.

In either case, the writers (periodic or sporadic) and readers (periodic, sporadic or soft) use possibly multiple
buffers and proper synchronization to ensure data coherency and consistency among applications.

The skin itself is structured as a set of patches, each containing a set of modules each containing a set of sensors.
This structure represents the way the hardware is arranged and can be completely overlooked by the average user, but
is useful for certain applications.

Each sensor further has a type tag, that is a value provided by the drivers.  These values could be anything that
is meaningful both to the drivers and users.  In an attempt to ensure that these values are meaningful to all users,
a set of known sensor types are [defined](constants#Sensor Types), which is a list that would be extended with every
added technology.

This documentation covers both the C functions and the C++ interface.  The C functions use the underscore name style
while the C++ interface uses camelCase.

## List of Structures and Classes

### `[skin]` and `[Skin]`
>	The main structure of the library.  All functionalities and data are through the functions associated with
	this object.
### `[skin_writer]` and `[SkinWriter]`
>	An object of this type is returned when providing a service.
### `[skin_reader]` and `[SkinReader]`
>	An object of this type is returned when attaching to a service to control its use.
### `[skin_driver]` and `[SkinDriver]`
>	An object of this type is returned when providing a driver.
### `[skin_user]` and `[SkinUser]`
>	An object of this type is returned when attaching to a driver to control its used.
### `[skin_sensor]` and `[SkinSensor]`
>	A sensor is a basic sensing element.  It is a single entity, sensing pressure, temperature or anything else and
	providing a single scaled value corresponding to the sensed value.
### `[skin_module]` and `[SkinModule]`
>	A module contains a number of sensors that are closely related, for example placed on the same PCB.
### `[skin_patch]` and `[SkinPatch]`
>	A patch is a collection of modules controlled by one microcontroller.
### `[skin_sensor_type]` and `[SkinSensorType]`
>	This structure is given to callbacks that iterate sensor types.
### `[skin_writer_attr]`, `[skin_writer_callbacks]`, `[SkinWriterAttr]` and `[SkinWriterCallbacks]`
>	The attributes and callbacks used to create a writer.
### `[skin_reader_attr]`, `[skin_reader_callbacks]`, `[SkinReaderAttr]` and `[SkinReaderCallbacks]`
>	The attributes and callbacks used to create a reader.
### `[skin_driver_attr]`, `[skin_driver_callbacks]`, `[SkinDriverAttr]` and `[SkinDriverCallbacks]`
>	The attributes and callbacks used to create a driver.
### `[skin_user_attr]`, `[skin_user_callbacks]`, `[SkinUserAttr]` and `[SkinUserCallbacks]`
>	The attributes and callbacks used to create a user.
### `[skin_driver_details]` and `[SkinDriverDetails]`
>	The details of a piece of skin handled by a driver.
### `[skin_writer_statistics]`, `[skin_reader_statistics]`, `[SkinWriterStatistics]` and `[SkinReaderStatistics]`
>	These basic structures hold statistics data generated by reader and writer threads.

## Examples

### [Mean Pressure on Skin]
>	This simple examples shows how to initialize the skin, acquire data at automatic rate and inspect all sensor
	responses.
