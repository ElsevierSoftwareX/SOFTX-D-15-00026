api Data Types
# Skinware - Driver API
version version 1.0.0.872
author Shahbaz Youssefi
keyword skin
keyword middleware
keyword skinware
keyword DIST
keyword MacLAB
shortcut index
shortcut globals
shortcut constants
previous functions skin_rt
next struct skink_sensor_layer

The skin kernel defines custom types for the ids and sizes of different structures. These types can have various sizes based on the configuration.
It is recommended that these types be used instead of C's own primitive types.

The types are in pairs of `\*_id` and `\*_size` which are guaranteed to be compatible. So for example a for loop such as the following is immune to
overflows:

	```
	skink_sensor_id    i;
	skink_sensor_size  count = /* get sensor count */;
	for (i = 0; i < count; ++i)
		/* perform operation */
	```

TYPE skink_sensor_id: uint16_t or uint32_t
	Type of sensor id

	The type of sensor ids. If Skinware is configured to support large skins, this type would be `uint32_t`.

TYPE skink_sensor_size: skink_sensor_id
	Type of number of sensors

	This type will be large enough to hold the number of sensors in the skin.

TYPE skink_sensor_response: uint16_t
	Type of sensor response

	The responses of the sensors will have this type. See also `[#SKINK_SENSOR_RESPONSE_MAX](constants)`.

TYPE skink_sensor_layer_id: uint16_t or uint32_t
	Type of sensor layer id

	The type of sensor layer ids. If Skinware is configured to support large skins, this type would be `uint32_t`.

TYPE skink_sensor_layer_size: skink_sensor_layer_id
	Type of number of sensor layers

	This type will be large enough to hold the number of sensor layers in the skin.

TYPE skink_module_id: uint16_t or uint32_t
	Type of module id

	The type of module ids. If Skinware is configured to support large skins, this type would be `uint32_t`.

TYPE skink_module_size: skink_module_id
	Type of number of modules

	This type will be large enough to hold the number of modules in the skin.

TYPE skink_patch_id: uint16_t or uint32_t
	Type of patch id

	The type of patch ids. If Skinware is configured to support large skins, this type would be `uint32_t`.

TYPE skink_patch_size: skink_patch_id
	Type of number of patches

	This type will be large enough to hold the number of patches in the skin.
