struct skink_sensor_layer
# Skinware - Driver API
version version 1.0.0.872
author Shahbaz Youssefi
keyword skin
keyword middleware
keyword skinware
keyword DIST
keyword MacLAB
shortcut index
shortcut constants
shortcut globals
seealso `[skink_device]` functions
prev struct skink_registration_data
next struct skink_sensor

Each device driver handles at least one sensor layer. It is the decision of the driver how to divide sensors in layers. Normally, the driver would group sensors of
the same type in a single layer. The user-space "sensor type" refers to the same concept as sensor layer. The `skink_sensor_layer` structure is only partly described
here as other parts are either internal to Skinware or are used elsewhere such as in services. It is important for the network driver to access only the fields
described here.

See [details callback](Callbacks#skink_device_details) for a list of fields that must be filled.

VARIABLE id_in_device: skink_sensor_layer_id
	Id of the sensor layer in device

	This value is the [id](Data Types#skink_sensor_layer_id) of the sensor layer in the device driver. If the device driver introduces `n` layers, its layers
	will have ids in `{0, 1, ..., n-1}`. This id can be used by the device driver first in [details callback](Callbacks#skink_device_details) to fill in
	layer information and later by the [acquire callback](Callbacks#skink_device_acquire) to identify data from which layer is being written.

VARIABLE name: char *
	Name of the sensor layer

	This is a string with maximum length [#SKINK_MAX_NAME_LENGTH](constants). It must be filled by the [details callback](Callbacks#skink_device_details)
	so that it could be used by the applications or services to distinguish sensors layers from each other.

VARIABLE sensors_count: skink_sensor_size
	Number of sensors in this layer

	This value must be filled by the [details callback](Callbacks#skink_device_details) showing the total number of sensors in this sensor layer.

VARIABLE modules_count: skink_module_size
	Number of modules in this layer

	This value must be filled by the [details callback](Callbacks#skink_device_details) showing the total number of modules in this sensor layer.

VARIABLE patches_count: skink_patch_size
	Number of patches in this layer

	This value must be filled by the [details callback](Callbacks#skink_device_details) showing the total number of patches in this sensor layer.

VARIABLE acquisition_rate: uint32_t
	Acquisition rate for this sensor layer

	This value must be filled by the [details callback](Callbacks#skink_device_details) showing the acquisition rate (in hertz) for this sensor layer.
	This rate will be used by the skin kernel to create periodic threads at that rate. That thread then periodically calls the [acquire callback]
	(Callbacks#skink_device_acquire).

VARIABLE sensors: skink_sensor *
	Sensors of this layer

	This is the array of [sensors](skink_sensor) of this layer. This array is allocated by the skin kernel and should be accessed by the [acquire callback]
	(Callbacks#skink_device_acquire) to fill in sensor values.

VARIABLE modules: skink_module *
	Modules of this layer

	This is the array of [modules](skink_module) of this layer. This array is allocated by the skin kernel and should be accessed by the [details callback]
	(Callbacks#skink_device_details) to fill in [#sensors_count](skink_module) for each module in this layer.

VARIABLE patches: skink_patch *
	Patches of this layer

	This is the array of [patches](skink_patch) of this layer. This array is allocated by the skin kernel and should be accessed by the [details callback]
	(Callbacks#skink_device_details) to fill in [#modules_count](skink_patch) for each patch in this layer.

VARIABLE number_of_buffers: uint8_t
	Number of acquisition buffers for this layer

	This is an optional field that can be modified by the [details callback](Callbacks#skink_device_details). The acquisition threads in Skinware will
	use this many buffers to communicate. This value is initially set to the value defined when the skin kernel module is loaded, and therefore does not
	need to be changed.

	Note that if this value is 1, synchronization is skipped. In this case, the acquisition has less delay, but data coherency may be jeopardized. Use this
	option only with algorithms that are insensitive to receiving input from different (although close) time instances.

	The higher this value is, the smaller is the chance for swap skips. Swap skips are discussed in the documentation describing the internals of Skinware.
	Tests show 3 buffers eliminate swap skips when Skinware is working on 10 layers and up to 25 users. With 2 buffers, there are still no swap skips with
	5~10 users. The recommended value is 3, but can be raised if swap skips occur. The file `/sys/skin_kernel/swap_skips` can be read to inspect the number of
	swap skips.
